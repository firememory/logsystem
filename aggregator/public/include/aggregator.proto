/*
  aggregator protocol define.
*/

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

package aggregator;


message FileID {
  required uint32 id          = 1;
}
//////////////////////////////////////////////////////////////////////////
// [collector ==> aggregator]
message CheckSumRequest {
  required FileID id          = 1;
  required uint32 fb_cs_pos   = 2;  // file block checksum 1(crc32)/4k
  required uint32 fb_cs_count = 3;
}

message CheckSumResponse {
  required FileID id          = 1;
  required uint32 fb_cs_pos   = 2;
  required uint32 fb_cs_count = 3;
  optional bytes fb_cs_data   = 4;
}

//////////////////////////////////////////////////////////////////////////
// Log
message LogRequest {
  required uint32 type        = 1;
  required string data        = 2; // extern data
  optional bytes content      = 3;
}

message LogResponse {
}

//////////////////////////////////////////////////////////////////////////
// File
message FileRequest {
  repeated group File       = 1 {
    required string dir       = 1;
    required string name      = 2;
    required uint64 ctime     = 3;    // file create time
  }
}

message FileResponse {
  repeated group File       = 1 {
    required FileID id        = 1;
    required string dir       = 2;
    required string name      = 3;
  }
}

// FileData
message FileDataRequest {
  repeated group FileData   = 1 {
    required FileID id        = 1;
    required uint64 pos       = 2;
    enum EncodeType {
      NONE            = 0;
      DEFLATE         = 1;
    }
    required EncodeType encode= 3 [default=NONE];
    optional uint32 org_len   = 4;
    required bytes  data      = 6;
  }
}

message FileDataResponse {
  repeated group FileData   = 1 {
    required FileID id        = 1;
    required uint64 size      = 2;
    
    enum FileStatus {
      PROCESS         = 0;
      FINISH          = 1;    // need checksum
    }
    optional FileStatus status= 3;
    optional string checksum  = 4; // md5
  }
}

//////////////////////////////////////////////////////////////////////////
//
message CollectorFileRequest {
}
message CollectorFileResponse {
  repeated group File         = 1 {
    required FileID id          = 1;
    required uint64 pos         = 2;
    required bool finish        = 3;
    required string dir         = 4;
    required string name        = 5;
  }
}

message CollectRuleRequest {
}

message CollectRuleResponse {
  repeated group Rule         = 1 {
    required string dir         = 1;
    optional string exclude     = 2;
    required string include     = 3;
  }
}

message ConfigRequest {
}

message ConfigResponse {
  repeated group Time         = 1 {
    required uint32 no          = 1;    // no
    required uint32 keepalive   = 2;    // second
    required uint32 rate        = 3;    // net send KBPS
    required uint32 start       = 4;    // second
    required uint32 end         = 5;    // second
    required uint32 steptime    = 6;    // second
  }
}

//////////////////////////////////////////////////////////////////////////
// logon
message LogonRequest {
  required uint32 ver         = 1;
  required string name        = 2;    // collector name
  optional bytes info         = 3;    // last exception
}

message LogonResponse {
  required uint64 session_id  = 1;    // check client
  optional bytes  info        = 2;    // aggregator name
}

// logout
message LogoutRequest {
  optional string msg         = 1;
}

// keepalive
message KeepAliveRequest {
  required uint64 sync_pos    = 1;    //
  optional string msg         = 2;
}

message KeepAliveResponse {
  required uint64 sync_pos    = 1;    //
  optional string msg         = 2;
}

//////////////////////////////////////////////////////////////////////////
// [aggregator (push) ==> collector]
message InstructResponse {

  enum EncodeType {
    CollectNow      = 1;
    SlowDown        = 2;
  }
  required uint32 instruction = 1;
}

//////////////////////////////////////////////////////////////////////////
message TransID {
  required uint32 id = 1;
}

message CollectorRequest {
  required uint64 session_id = 1;     // check client
  optional TransID trxid_request = 3;

  optional LogonRequest logon_request = 5;
  optional LogoutRequest logout_request = 6;
  optional KeepAliveRequest keepalive_request = 7;

  optional LogRequest  log_request = 8;
  optional ConfigRequest  config_request = 10;
  optional CollectorFileRequest  collectorfile_request = 11;
  optional CollectRuleRequest  collectrule_request = 12;
  optional FileRequest  file_request = 13;
  optional FileDataRequest filedata_request = 14;
  optional CheckSumRequest checksum_request = 15;
}

message AggregatorResponse {
  required uint32 error_code = 1;           // zero mean's ok
  optional string error_message = 2;

  optional TransID trxid_response = 3;

  optional LogonResponse logon_response = 5;

  optional KeepAliveResponse keepalive_response = 7;
  optional LogResponse log_response = 8;

  optional ConfigResponse  config_response = 10;
  optional CollectorFileResponse  collectorfile_response = 11;
  optional CollectRuleResponse  collectrule_response = 12;
  optional FileResponse  file_response = 13;
  optional FileDataResponse filedata_response = 14;
  optional CheckSumResponse checksum_response = 15;
  optional InstructResponse instruct_response = 16;
}
